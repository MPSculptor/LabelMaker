public class createLabel
    {



        //Set up the label size and shape
        public createLabel(string[] queueData, string[] labelData, string[] defaultsString) : base(queueData[0] + " - " + labelData[2])
        {

            int scaler = 7;
            int labelWidth = int.Parse(labelData[0]);
            int labelHeight = int.Parse(labelData[1]);

            setSize((labelWidth * scaler) + 18, (labelHeight * scaler) + 40);
            Background = Color.DARK_GRAY;
            //repaint();
            //setLayout (null);
            DefaultCloseOperation = JFrame.EXIT_ON_CLOSE;
            Container cp = this.ContentPane;
            cp.setSize(labelWidth * scaler, labelHeight * scaler);

            //cp.setSize(730,400);
            cp.Background = Color.white;
            cp.Layout = null;
            int contentWidth = cp.Width;
            int contentHeight = cp.Height;

            Console.WriteLine("Bounds - " + labelWidth * scaler + " by " + labelHeight * scaler);
            Console.WriteLine("content - " + contentWidth + " by " + contentHeight);
            Visible = true;

            //DISCOVER LABEL PARAMETERS
            //find name and split into fields
            string labelName = (labelData[2]);
            Console.WriteLine(labelName);
            // fields = how many fields on the label
            int fields = 1;
            //datainputs = how many data items identify a field
            int dataInputs = 1;

            for (int i = 3; i < labelData.Length; i++)
            {
                if (labelData[i].Equals(labelName))
                {
                    fields++;
                }
                else
                {
                    if (fields == 1)
                    {
                        dataInputs++;
                    }
                }
            }

            //Test to see it works
            Console.WriteLine("fields = " + fields + "   dataInputs " + dataInputs);


            //MAIN ROUTINE FOR ADDING LABEL FIELDS ONE BY ONE

            //iterate through fields
            for (int i = 0; i < fields; i++)
            {

                int jump = dataInputs;
                int start = 2 + (jump * i);

                //Collect queue data into variables
                string type = (labelData[start + 2]);
                Console.WriteLine(i + " - " + type);
                int xSize = int.Parse(labelData[start + 3]);
                int ySize = int.Parse(labelData[start + 4]);
                int xPos = int.Parse(labelData[start + 5]);
                int yPos = int.Parse(labelData[start + 6]);
                bool? isProfile = bool.Parse(labelData[start + 7]); //whether data from profile or special
                bool? isFontVariable = bool.Parse(labelData[start + 8]);
                bool? areLinesReduceable = bool.Parse(labelData[start + 9]);
                int listboxNo = int.Parse(labelData[start + 10]);
                string fixedValueString = (labelData[start + 11]); //such as border width etc
                int noLines = int.Parse(labelData[start + 12]);
                string justify = (labelData[start + 13]);
                bool? isFontColourProfile = bool.Parse(labelData[start + 14]);
                string fontName = (labelData[start + 15]);
                int fontSize = int.Parse(labelData[start + 16]);
                bool? isFontBold = bool.Parse(labelData[start + 17]);
                bool? isFontItalic = bool.Parse(labelData[start + 18]);
                string sentColour = (labelData[start + 19]);

                string profileTextColour = (queueData[12]);
                string profileBorderColour = (queueData[15]);
                string profileBackgroundColour = (queueData[16]);

                //set justification as an integer
                int justifyInt = 0;
                switch (justify.Trim())
                {
                    case "left":
                        justifyInt = 0;
                        break;
                    case "right":
                        justifyInt = 2;
                        break;
                    case "center":
                        justifyInt = 1;
                        break;
                }

                //set content size and position
                int lines = 1; //set lines as 1 and then increase if necessary later
                int yPosd = 0;
                int xPosd = 0;
                int xSized = contentWidth * xSize / 100;
                int ySized = contentHeight * ySize / 100 / (lines);
                if (xPos == 0)
                {
                    //set as centred
                    xPosd = (contentWidth / 2) * (100 - xSize) / 100;
                }
                else
                {
                    xPosd = contentWidth * xPos / 100;
                }

                if (yPos == 0)
                {
                    yPosd = (contentHeight / 2) * (100 - ySize) / 100;
                }
                else
                {
                    yPosd = contentHeight * yPos / 100;
                }



                switch (type)
                {
                    case "text":

                        //load with custom text from label
                        string textToSend = labelData[start + 11];
                        if (isProfile.Value)
                        {
                            //if text comes from queue entry, load this instead
                            textToSend = queueData[listboxNo];
                        }

                        //Work out colour
                        Color colourFont = Color.decode(getHexColour(sentColour));
                        if (!isFontColourProfile.Value)
                        {
                            colourFont = Color.decode(getHexColour(profileTextColour));
                        }

                        string[] textToSendArray = new string[1];
                        textToSendArray[0] = textToSend;
                        if (noLines > 1)
                        {
                            //handle multi-line text
                            string[] labelReturned = new string[noLines];
                            labelReturned = TextOperations.SplitText(textToSend, noLines);
                            paintText(cp, labelReturned, labelReturned.Length, xPosd, yPosd, xSized, ySized, justifyInt, fontName, fontSize, colourFont, isFontVariable.Value, areLinesReduceable.Value, isFontBold.Value, isFontItalic.Value, textToSend);
                        }
                        else
                        {
                            //send single line text
                            paintText(cp, textToSendArray, 1, xPosd, yPosd, xSized, ySized, justifyInt, fontName, fontSize, colourFont, isFontVariable.Value, areLinesReduceable.Value, isFontBold.Value, isFontItalic.Value, textToSend);
                        }

                        break;

                    case "border":

                        Color borderColour = Color.decode(getHexColour(profileBorderColour));
                        int borderWidth = int.Parse(fixedValueString);
                        borderWidth = (contentWidth * borderWidth / 100);
                        paintBorder(cp, xPosd, yPosd, xSized, ySized, borderWidth, borderColour);

                        break;

                    case "colourbox":

                        Color colourBoxColour = Color.decode(getHexColour(profileBackgroundColour));
                        paintColourbox(cp, xPosd, yPosd, xSized, ySized, colourBoxColour);

                        break;

                    case "image":

                        string pictureString = "";
                        if (isProfile.Value)
                        {
                            pictureString = (defaultsString[0] + queueData[10]);
                        }
                        else
                        {
                            pictureString = (defaultsString[1] + fixedValueString);
                        }

                        Console.WriteLine(pictureString);
                        paintImage(cp, xPosd, yPosd, xSized, ySized, pictureString);

                        break;
                    default:
                        break;
                }
            }

        }

        public virtual void paintText(Container whereTo, string[] textArray, int lines, int xPosd, int yPosd, int xSized, int ySized, int justify, string fontName, int fontSize, Color colourFont, bool isFontVariable, bool areLinesReduceable, bool isFontBold, bool isFontItalic, string textToSend)
        {

            int fontNewSize = 10;

            string fontForm = "";
            if (isFontBold)
            {
                fontForm = fontForm + "BOLD";
            }
            if (isFontItalic)
            {
                fontForm = fontForm + "ITALIC";
            }


            if (!isFontVariable)
            {
                fontNewSize = fontSize;
            }

            //create graphics object
            Graphics g = whereTo.Graphics;
            Graphics2D g1 = (Graphics2D)g;

            g1.Color = colourFont;
            RenderingHints rh = new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g1.RenderingHints = rh;

            Font plainTextFont = new Font(fontName, Font.PLAIN, fontSize);
            Font boldTextFont = new Font(fontName, Font.BOLD, fontSize);
            Font italicTextFont = new Font(fontName, Font.ITALIC, fontSize);
            Font boldItalicTextFont = new Font(fontName, Font.BOLD + Font.ITALIC, fontSize);
            switch (fontForm)
            {
                case "BOLD":
                    g1.Font = boldTextFont;
                    break;
                case "ITALIC":
                    g1.Font = italicTextFont;
                    break;
                case "BOLDITALIC":
                    g1.Font = boldItalicTextFont;
                    break;
                default:
                    g1.Font = plainTextFont;
                    break;

            }
            Console.WriteLine("Font is " + fontForm);

            Font fontSet = g1.Font;

            //GO FOR PRINTING
            int yOriginalSized = ySized;
            ySized = ySized / lines;
            g1.drawString("", 0, 0);

            double[] factorsToUse = new double[textArray.Length];

            //Find out the correct font size to use

            bool? haveLinesReduced = new bool?(false);
            int realNoLines = textArray.Length;

            if (areLinesReduceable && lines > 1)
            {
                Console.WriteLine("***REDUCING LINES ROUTINE ***");
                haveLinesReduced = true;
                double bestFactor = 0;
                int bestLines = 1;
                for (int f = lines; f > 0; f--)
                {
                    string[] labelReturned = new string[f];
                    labelReturned = TextOperations.SplitText(textToSend, f);
                    Console.WriteLine("REDUCING F = " + f);

                    for (int i = 0; i < f; i++)
                    {
                        Console.WriteLine(labelReturned[i]);

                        Font fontToSend = g1.Font;

                        double? factorToUse;
                        factorToUse = sizeGraphicText(whereTo, labelReturned[i], fontToSend, xSized, (yOriginalSized / f));

                        factorsToUse[i] = factorToUse.Value;
                    }
                    double returnedFactor = 0;
                    if (isFontVariable)
                    {
                        double averageFactor = 0;
                        Console.WriteLine("Font IS Variable. Lines - " + labelReturned.Length);
                        for (int x = 0; x < (labelReturned.Length); x++)
                        {
                            averageFactor = averageFactor + factorsToUse[x];
                            Console.WriteLine("Average Factor = " + averageFactor);
                        }
                        returnedFactor = averageFactor / (labelReturned.Length);

                    }
                    else
                    {
                        Console.WriteLine("Font NOT Variable");
                        double averageFactor = 99999999;
                        for (int x = 0; x < (labelReturned.Length); x++)
                        {
                            if (averageFactor > factorsToUse[x])
                            {
                                averageFactor = factorsToUse[x];
                            }
                        }
                        returnedFactor = averageFactor;
                    }
                    Console.WriteLine("Best - " + bestFactor);
                    Console.WriteLine("Returned - " + returnedFactor);
                    if (returnedFactor > bestFactor)
                    {
                        bestFactor = returnedFactor;
                        bestLines = f;
                    }
                }

                string[] labelReturned = new string[bestLines];
                labelReturned = textOperations.splitText(textToSend, bestLines);

                for (int i = 0; i < (labelReturned.Length); i++)
                {
                    Console.WriteLine("Chosen - " + labelReturned[i]);

                    Font fontToSend = g1.Font;

                    double? factorToUse;
                    factorToUse = sizeGraphicText(whereTo, labelReturned[i], fontToSend, xSized, (yOriginalSized / (labelReturned.Length)));

                    factorsToUse[i] = factorToUse.Value;
                }
                realNoLines = labelReturned.Length;

                ySized = yOriginalSized / realNoLines;

                for (int i = 0; i < (labelReturned.Length); i++)
                {
                    textArray[i] = labelReturned[i];

                    //Draw edges of field
                    //g1.setStroke(new BasicStroke(1));
                    //g1.drawRect(xPosd, (yPosd + (i*ySized)) , xSized, ySized );
                }


            }
            else
            {

                Console.WriteLine("### NOT REDUCING ROUTINE ###");
                for (int i = 0; i < (textArray.Length); i++)
                {
                    Console.WriteLine(textArray[i]);

                    Font fontToSend = fontSet;
                    //Font fontToSend = g1.getFont();

                    //Draw edges of field
                    //g1.setStroke(new BasicStroke(1));
                    //g1.drawRect(xPosd, (yPosd + (i*ySized)) , xSized, ySized );

                    double? factorToUse;
                    factorToUse = sizeGraphicText(whereTo, textArray[i], fontSet, xSized, ySized);

                    factorsToUse[i] = factorToUse.Value;
                }
            }

            double? factorToUse;
            g1.Font = fontSet;
            //Find and store current font
            //FontMetrics metrics = g1.getFontMetrics();
            //Font currentFont = metrics.getFont();

            //Set all fonts to the same if required
            if (!isFontVariable)
            {
                double? smallestFactor = (double)99999;
                for (int i = 0; i < (textArray.Length); i++)
                {
                    if (factorsToUse[i] < smallestFactor)
                    {
                        smallestFactor = factorsToUse[i];
                    }
                }
                for (int i = 0; i < (textArray.Length); i++)
                {
                    factorsToUse[i] = smallestFactor;
                }
            }


            for (int i = 0; i < (realNoLines); i++)
            {

                factorToUse = factorsToUse[i];
                // create new font from current 
                AffineTransform at = new AffineTransform();
                at.setToScale(factorToUse, factorToUse);
                Font finalFont = fontSet.deriveFont(at);
                Console.WriteLine("Factor at setting - " + factorToUse);
                g1.Font = finalFont;
                FontMetrics metrics = g1.FontMetrics;

                //find size and find positions
                int newWidth = metrics.stringWidth(textArray[i]);
                int newHeight = metrics.Ascent;

                Console.WriteLine("Justification - " + justify);
                Console.WriteLine("XSized - " + xSized + " , width - " + newWidth);


                //Set horizontal position
                int xxPosd = 0;
                switch (justify)
                {
                    case 0:
                        xxPosd = xPosd;
                        break;
                    case 1:
                        xxPosd = xPosd + ((xSized - newWidth) / 2);
                        break;
                    case 2:
                        xxPosd = xPosd + xSized - newWidth;
                        break;
                }

                //Centre Height
                Console.WriteLine("YSized - " + ySized + " , height - " + newHeight);
                int yySized = ySized;
                int yyPosd = (yPosd + yySized + (i * yySized));
                yyPosd = yyPosd - ((yySized - newHeight) / 2);

                g1.drawString(textArray[i], xxPosd, yyPosd);

            }
        }


        public virtual double? sizeGraphicText(Container whereTo, String textSent, Font fontSent, int xSized, int ySized)
        {

            //PRODUCES A SCALE FACTOR TO MULTIPLY THE DEFAULT FONT.

            int scaler = 100;
            double sensitivity = 1;
            Graphics g = whereTo.Graphics;
            Graphics2D g1 = (Graphics2D)g;
            Font firstFont = fontSent.deriveFont(scaler);
            g1.Font = firstFont; // set huge font to render with here


            //Get sizes
            FontMetrics metrics = g1.FontMetrics;
            string text = textSent;
            //Rectangle2D rect = metrics.getStringBounds(text, g1);
            //int width = (int)rect.getWidth();
            //int height = (int)rect.getHeight();
            int width = metrics.stringWidth(text);
            int height = metrics.Ascent;

            //compare to sizes wanted
            double factorToUse = 0;
            double xFactor = ((double)xSized / (double)width);
            double yFactor = ((double)ySized / (double)height);

            Console.WriteLine("Text Sizing.  ** text = " + text);
            Console.WriteLine("Text Sizing.  ** xSized = " + xSized + ".  width = " + width);
            Console.WriteLine("Text Sizing.  ** ySized = " + ySized + ".  height = " + height);
            Console.WriteLine("Text Sizing.  ** xFactor = " + xFactor);
            Console.WriteLine("Text Sizing.  ** yFactor = " + yFactor);

            int newFontSize = 0;
            if (xFactor < yFactor)
            {
                factorToUse = (xFactor * sensitivity);
            }
            else
            {
                factorToUse = (yFactor * sensitivity);
            }
            Console.WriteLine("Text Sizing.  ** factorToUse = " + factorToUse);
            return factorToUse;
        }


        public virtual void paintBorder(Container whereTo, int xPosd, int yPosd, int xSized, int ySized, int borderWidth, Color definedColour)
        {

            Console.WriteLine("got to border " + xPosd + "," + yPosd + "," + xSized + "," + ySized);

            Graphics g = whereTo.Graphics;
            Graphics2D g1 = (Graphics2D)g;

            Console.WriteLine("got to paint. Colour " + definedColour);
            g1.Stroke = new BasicStroke(borderWidth);
            g1.Color = definedColour;
            g1.drawString("", 150, 150);

            g1.draw(new Rectangle2D.Double(xPosd, yPosd, xSized, ySized));


        }

        public virtual void paintColourbox(Container whereTo, int xPosd, int yPosd, int xSized, int ySized, Color definedColour)
        {

            Graphics g = whereTo.Graphics;
            Graphics2D g1 = (Graphics2D)g;

            Console.WriteLine("got to colourbox Colour " + definedColour);

            g1.drawString("", 150, 150);
            g1.Paint = definedColour;
            g1.fill(new Rectangle2D.Double(xPosd, yPosd, xSized, ySized));


        }

        public virtual void paintImage(Container whereTo, int xPosd, int yPosd, int xSized, int ySized, string imageFile)
        {

            Graphics g = whereTo.Graphics;
            Graphics2D g1 = (Graphics2D)g;

            Console.WriteLine("got to image " + imageFile);

            BufferedImage img = null;
            try
            {
                img = ImageIO.read(new File(imageFile));
                Console.WriteLine("read image file ");
            }
            catch (IOException)
            {
            }
            g1.drawString("", 150, 150);
            g1.drawImage(img, xPosd, yPosd, xSized, ySized, null);

        }

        public virtual string getHexColour(string sentColour)
        {

            //CONVERT AN INTEGER COLOUR INTO A HEX COLOUR
            //sent colour as RGB single number
            string gotHexColour = "";

            //split single colour number into 3 components
            int numberColour = (int.Parse(sentColour));
            int red = (numberColour / 256 / 256);
            int greenblue = numberColour - (red * 256 * 256);
            int green = (greenblue / 256);
            int blue = (greenblue - (green * 256));

            Console.WriteLine("colours - " + red + " , " + green + " , " + blue);

            //convert integer to Hex value
            // value of 00 can convert to "0", so check and change
            string redString = red.ToString("x");
            if (redString.Equals("0"))
            {
                redString = "00";
            }

            string greenString = green.ToString("x");
            if (greenString.Equals("0"))
            {
                greenString = "00";
            }

            string blueString = blue.ToString("x");
            if (blueString.Equals("0"))
            {
                blueString = "00";
            }

            //add into single Hex value
            gotHexColour = "#" + redString + greenString + blueString;
            Console.WriteLine(gotHexColour);

            return gotHexColour;
        }





    }